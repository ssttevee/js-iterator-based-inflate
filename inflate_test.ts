import { assertEquals } from "https://deno.land/std@0.158.0/testing/asserts.ts";
import { Inflator } from "./inflate.ts";
import { concat } from "./util.ts";

const data = ["A SALAD; A SALSA;", "ABCDEABCD ABCDEABCD"];

// deno-fmt-ignore
const blobs = {
  'store only': {
    [data[0]]: [
      new Uint8Array([ 0x01, 0x11, 0x00, 0xee, 0xff, 0x41, 0x20, 0x53, 0x41, 0x4c, 0x41, 0x44, 0x3b, 0x20, 0x41, 0x20, 0x53, 0x41, 0x4c, 0x53, 0x41, 0x3b ]),
      new Uint8Array([ 0x00, 0x11, 0x00, 0xee, 0xff, 0x41, 0x20, 0x53, 0x41, 0x4c, 0x41, 0x44, 0x3b, 0x20, 0x41, 0x20, 0x53, 0x41, 0x4c, 0x53, 0x41, 0x3b, 0x03, 0x00 ]),
    ],
    [data[1]]: [
      new Uint8Array([ 0x01, 0x13, 0x00, 0xec, 0xff, 0x41, 0x42, 0x43, 0x44, 0x45, 0x41, 0x42, 0x43, 0x44, 0x20, 0x41, 0x42, 0x43, 0x44, 0x45, 0x41, 0x42, 0x43, 0x44 ])
    ],
  },
  'fixed only': {
    [data[0]]: [
      new Uint8Array([ 0x73, 0x54, 0x08, 0x76, 0xf4, 0x71, 0x74, 0xb1, 0x56, 0x70, 0x04, 0x31, 0x82, 0x1d, 0xad, 0x01 ]),
    ],
    [data[1]]: [
      new Uint8Array([ 0x73, 0x74, 0x72, 0x76, 0x71, 0x75, 0x04, 0x12, 0x0a, 0x20, 0x02, 0xcc, 0x02, 0x00 ]),
      new Uint8Array([ 0x73, 0x74, 0x72, 0x76, 0x71, 0x75, 0x04, 0x12, 0x0a, 0x20, 0x02, 0xcc, 0x02, 0x00 ]),
      new Uint8Array([ 0x73, 0x74, 0x72, 0x76, 0x71, 0x75, 0x04, 0x12, 0x0a, 0x8e, 0x30, 0x16, 0x00 ]),
      new Uint8Array([ 0x73, 0x74, 0x72, 0x76, 0x71, 0x75, 0x04, 0x12, 0x0a, 0x8e, 0x30, 0x16, 0x00]),
      new Uint8Array([ 0x73, 0x74, 0x72, 0x76, 0x71, 0x75, 0x04, 0x12, 0x0a, 0x8e, 0x30, 0x16, 0x00 ]),
    ],
  },
  'dynamic only': {
    // [data[0]]: [
    // ],
    [data[1]]: [
      new Uint8Array([ 0x3d, 0xc6, 0x39, 0x11, 0x00, 0x00, 0x0c, 0x02, 0x30, 0x2b, 0xb5, 0x52, 0x1e, 0xff, 0x96, 0x38, 0x16, 0x96, 0x5c, 0x1e, 0x94, 0xcb, 0x6d, 0x01 ])
    ],
  },
  mixed: [],
};

const decoder = new TextDecoder();

Deno.test("inflator", async (t) => {
  for (const [method, expectedCases] of Object.entries(blobs)) {
    await t.step(method, () => {
      for (const [expected, cases] of Object.entries(expectedCases)) {
        for (const payload of cases) {
          let result = new Uint8Array();
          const inflator = new Inflator({ initialBuffer: payload });
          // for (const byte of payload) {
          //   for (const data of inflator.push(new Uint8Array([byte]))) {
          //     result = concat(result, data);
          //   }
          // }

          for (const data of inflator.close()) {
            result = concat(result, data);
          }

          assertEquals(decoder.decode(result), expected);
        }
      }
    });
  }
});
