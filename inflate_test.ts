import { assertEquals } from "https://deno.land/std@0.158.0/testing/asserts.ts";
import { Inflator } from "./inflate.ts";
import { concat } from "./util.ts";

const expected = "A SALAD; A SALSA;";

// deno-fmt-ignore
const compressed = [
  new Uint8Array([ 0x01, 0x11, 0x00, 0xee, 0xff, 0x41, 0x20, 0x53, 0x41, 0x4c, 0x41, 0x44, 0x3b, 0x20, 0x41, 0x20, 0x53, 0x41, 0x4c, 0x53, 0x41, 0x3b ]),
  new Uint8Array([ 0x73, 0x54, 0x08, 0x76, 0xf4, 0x71, 0x74, 0xb1, 0x56, 0x70, 0x04, 0x31, 0x82, 0x1d, 0xad, 0x01 ]),
  new Uint8Array([ 0x73, 0x54, 0x08, 0x76, 0xf4, 0x71, 0x74, 0xb1, 0x56, 0x70, 0x04, 0x31, 0x82, 0x1d, 0xad, 0x01 ]),
  new Uint8Array([ 0x73, 0x54, 0x08, 0x76, 0xf4, 0x71, 0x74, 0xb1, 0x56, 0x70, 0x04, 0x31, 0x82, 0x1d, 0xad, 0x01 ]),
  new Uint8Array([ 0x73, 0x54, 0x08, 0x76, 0xf4, 0x71, 0x74, 0xb1, 0x56, 0x70, 0x04, 0x31, 0x82, 0x1d, 0xad, 0x01 ]),
];

const decoder = new TextDecoder();

Deno.test("inflator", async (t) => {
  for (const [level, payload] of Object.entries(compressed)) {
    await t.step("level " + level, () => {
      let result = new Uint8Array();
      const inflator = new Inflator();
      for (const byte of payload) {
        for (const data of inflator.push(new Uint8Array([byte]))) {
          result = concat(result, data);
        }
      }

      for (const data of inflator.close()) {
        result = concat(result, data);
      }

      assertEquals(decoder.decode(result), expected);
    });
  }
});
